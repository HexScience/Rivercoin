#version 400

layout(triangles, equal_spacing, ccw) in;

in vec3 verticesc_in[];
in vec3 normalsc_in[];
in vec2 coordsc_in[];

out vec3 vertex;
out vec3 normal;
out vec2 coords;

uniform mat4 model;
uniform mat4 view;
uniform mat4 proj;

struct camera{
    mat4 proj;
    mat4 rotm;
    mat4 posm;
};

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

mat4 rotationMatrix(vec3 axis, float angle)
{
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;

    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
                0.0,                                0.0,                                0.0,                                1.0);
}

mat4 perspectiveMatrix(float fov, float aspectRatio, float zNear, float zFar)
{
    float tanHalfFOV = tan(fov / 2.0);
    float zRange = zNear - zFar;

    return mat4(vec4(1.0 / (tanHalfFOV * aspectRatio), 0.0, 0.0, 0.0),
                vec4(0.0, 1.0 / tanHalfFOV, 0.0, 0.0),
                vec4(0.0, 0.0, (-zNear -zFar) / zRange, 2.0 * zFar * zNear / zRange),
                vec4(0.0, 0.0, 0.0, 1.0));
}

mat4 translation(float x, float y, float z)
{
    return mat4(vec4(1.0, 0.0, 0.0, x),
                vec4(0.0, 1.0, 0.0, y),
                vec4(0.0, 0.0, 1.0, z),
                vec4(0.0, 0.0, 0.0, 1.0));
}

#define pi 3.14159265359
#define toRadians(x) (2*pi * (x / 360))

uniform mat4 mvp;
out vec4 worldPos;

//	Classic Perlin 3D Noise
//	by Stefan Gustavson
//
vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}
vec4 fade(vec4 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}

float cnoise(vec4 P){
  vec4 Pi0 = floor(P); // Integer part for indexing
  vec4 Pi1 = Pi0 + 1.0; // Integer part + 1
  Pi0 = mod(Pi0, 289.0);
  Pi1 = mod(Pi1, 289.0);
  vec4 Pf0 = fract(P); // Fractional part for interpolation
  vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0
  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
  vec4 iy = vec4(Pi0.yy, Pi1.yy);
  vec4 iz0 = vec4(Pi0.zzzz);
  vec4 iz1 = vec4(Pi1.zzzz);
  vec4 iw0 = vec4(Pi0.wwww);
  vec4 iw1 = vec4(Pi1.wwww);

  vec4 ixy = permute(permute(ix) + iy);
  vec4 ixy0 = permute(ixy + iz0);
  vec4 ixy1 = permute(ixy + iz1);
  vec4 ixy00 = permute(ixy0 + iw0);
  vec4 ixy01 = permute(ixy0 + iw1);
  vec4 ixy10 = permute(ixy1 + iw0);
  vec4 ixy11 = permute(ixy1 + iw1);

  vec4 gx00 = ixy00 / 7.0;
  vec4 gy00 = floor(gx00) / 7.0;
  vec4 gz00 = floor(gy00) / 6.0;
  gx00 = fract(gx00) - 0.5;
  gy00 = fract(gy00) - 0.5;
  gz00 = fract(gz00) - 0.5;
  vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);
  vec4 sw00 = step(gw00, vec4(0.0));
  gx00 -= sw00 * (step(0.0, gx00) - 0.5);
  gy00 -= sw00 * (step(0.0, gy00) - 0.5);

  vec4 gx01 = ixy01 / 7.0;
  vec4 gy01 = floor(gx01) / 7.0;
  vec4 gz01 = floor(gy01) / 6.0;
  gx01 = fract(gx01) - 0.5;
  gy01 = fract(gy01) - 0.5;
  gz01 = fract(gz01) - 0.5;
  vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);
  vec4 sw01 = step(gw01, vec4(0.0));
  gx01 -= sw01 * (step(0.0, gx01) - 0.5);
  gy01 -= sw01 * (step(0.0, gy01) - 0.5);

  vec4 gx10 = ixy10 / 7.0;
  vec4 gy10 = floor(gx10) / 7.0;
  vec4 gz10 = floor(gy10) / 6.0;
  gx10 = fract(gx10) - 0.5;
  gy10 = fract(gy10) - 0.5;
  gz10 = fract(gz10) - 0.5;
  vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);
  vec4 sw10 = step(gw10, vec4(0.0));
  gx10 -= sw10 * (step(0.0, gx10) - 0.5);
  gy10 -= sw10 * (step(0.0, gy10) - 0.5);

  vec4 gx11 = ixy11 / 7.0;
  vec4 gy11 = floor(gx11) / 7.0;
  vec4 gz11 = floor(gy11) / 6.0;
  gx11 = fract(gx11) - 0.5;
  gy11 = fract(gy11) - 0.5;
  gz11 = fract(gz11) - 0.5;
  vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);
  vec4 sw11 = step(gw11, vec4(0.0));
  gx11 -= sw11 * (step(0.0, gx11) - 0.5);
  gy11 -= sw11 * (step(0.0, gy11) - 0.5);

  vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);
  vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);
  vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);
  vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);
  vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);
  vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);
  vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);
  vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);
  vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);
  vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);
  vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);
  vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);
  vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);
  vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);
  vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);
  vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);

  vec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));
  g0000 *= norm00.x;
  g0100 *= norm00.y;
  g1000 *= norm00.z;
  g1100 *= norm00.w;

  vec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));
  g0001 *= norm01.x;
  g0101 *= norm01.y;
  g1001 *= norm01.z;
  g1101 *= norm01.w;

  vec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));
  g0010 *= norm10.x;
  g0110 *= norm10.y;
  g1010 *= norm10.z;
  g1110 *= norm10.w;

  vec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));
  g0011 *= norm11.x;
  g0111 *= norm11.y;
  g1011 *= norm11.z;
  g1111 *= norm11.w;

  float n0000 = dot(g0000, Pf0);
  float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));
  float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));
  float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));
  float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));
  float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));
  float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));
  float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));
  float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));
  float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));
  float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));
  float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));
  float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));
  float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));
  float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));
  float n1111 = dot(g1111, Pf1);

  vec4 fade_xyzw = fade(Pf0);
  vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);
  vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);
  vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);
  vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);
  float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);
  return 2.2 * n_xyzw;
}

struct x512seed_t{
    float ax;
    float ay;
    float az;
    float aw;

    float bx;
    float by;
    float bz;
    float bw;

    float cx;
    float cy;
    float cz;
    float cw;

    float dx;
    float dy;
    float dz;
    float dw;
};

float seeded_noise(vec3 pos, x512seed_t seed)
{
    float a0 = cnoise(vec4(vertex / 3.0, seed.ax));
    float b0 = cnoise(vec4(vertex / 3.0, seed.ay));
    float c0 = cnoise(vec4(vertex / 3.0, seed.az));

    float d0 = cnoise(vec4(vertex / 0.235, seed.aw));


    float a1 = cnoise(vec4(vertex / 4.0, seed.bx));
    float b1 = cnoise(vec4(vertex / 4.0, seed.by));
    float c1 = cnoise(vec4(vertex / 4.0, seed.bz));

    float d1 = cnoise(vec4(vertex / 0.1235, seed.bw));


    float a2 = cnoise(vec4(vertex * 0.365, seed.cx));
    float b2 = cnoise(vec4(vertex * 0.365, seed.cy));
    float c2 = cnoise(vec4(vertex * 0.365, seed.cz));

    float d2 = cnoise(vec4(vertex / 0.76532, seed.cw));


    float a3 = cnoise(vec4(vertex * 1.365, seed.dx));
    float b3 = cnoise(vec4(vertex * 1.365, seed.dy));
    float c3 = cnoise(vec4(vertex * 1.365, seed.dz));

    float d3 = cnoise(vec4(vertex / 1.76532, seed.dw));

    return  (a0 + b0 + c0 + d0) * 0.65 +
            (a1 + b1 + c1 + d1) * 0.20 +
            (a2 + b2 + c2 + d2) * 0.05 +
            (a3 + b3 + c3 + d3) * 0.10;
}

vec3 AdjustPosition(vec3 position)
{
    vec3 center = vec3(0.0);
    float d0 = distance(center, vertex);
    float d1 = 1.0-d0;
    float d2 = max(min(pow(1.65352, d1), 30), 0.0);

    return position + vec3(0, 0, (d2 * (sin(d1 * -1.235) * 0.5 + 0.5) * 10.0) * sign(d0 * 100.0));
}

void main()
{
    // mat4 identity = mat4(vec4(1.0, 0.0, 0.0, 0.0),
    //                 vec4(0.0, 1.0, 0.0, 0.0),
    //                 vec4(0.0, 0.0, 1.0, 0.0),
    //                 vec4(0.0, 0.0, 0.0, 1.0));
    //
    //                 vec3 pos = vec3(0.0, 0.0, 0.0);
    //
    // mat4 model =                          identity * (translation(pos.x, pos.y, pos.z)
    //                                                                                                  * (rotationMatrix(vec3(0.0,0.0,1.0), 20.0)
    //                                                                                                                                            * mat4(vec4(1.0, 0.0, 0.0, 0.0),
    //                                                                                                                                                   vec4(0.0, 1.0, 0.0, 0.0),
    //                                                                                                                                                   vec4(0.0, 0.0, 1.0, 0.0),
    //                                                                                                                                                   vec4(0.0, 0.0, 0.0, 1.0))));
    // camera cam;
    // cam.proj = perspectiveMatrix(toRadians(90.0), 1280.0/720.0, 0.1, 1000.0);
    // cam.posm = translation(0.0, 0.0, -10.0);
    // cam.rotm = rotationMatrix(vec3(0.0, 0.0, 0.0), 0.0);
    //
    //
    // mat4 projectionView = cam.proj * (cam.rotm * cam.posm);
    // mat4 mvp = projectionView * model;


    coords = interpolate2D(coordsc_in[0], coordsc_in[1], coordsc_in[2]);
   	//normal = normalize(interpolate3D(normalsc_in[0], normalsc_in[1], normalsc_in[2]));
   	vertex = interpolate3D(verticesc_in[0], verticesc_in[1], verticesc_in[2]);

   	x512seed_t seed;
   	seed.ax = 0;
   	seed.ay = 0;
   	seed.az = 0;
   	seed.aw = 0;

   	seed.bx = 0;
   	seed.by = 0;
   	seed.bz = 0;
   	seed.bw = 0;

   	seed.cx = 0;
   	seed.cy = 0;
   	seed.cz = 0;
   	seed.cw = 0;

   	seed.dx = 0;
   	seed.dy = 0;
   	seed.dz = 0;
   	seed.dw = 0;

    vertex += AdjustPosition(vertex);

   	float noise = seeded_noise(vertex, seed);

    normal = normalize(vertex - vec3(0, 0, vertex.z));

    float Displacement = (noise * 0.26542346);

    vertex += normal * Displacement;
    worldPos = vec4(vertex, (noise * 0.5 + 0.5) * 0.26542346);
    gl_Position = mvp * vec4(vertex, 1.0);
}