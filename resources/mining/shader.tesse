#version 150

layout(triangles, equal_spacing, ccw) in;

uniform mat4 gVP;

in vec3 vertices_in[];
in vec3 normals_in[];
in vec2 coords_in[];

out vec3 vertex;
out vec3 normal;
out vec2 coords;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

void main()
   	coords = interpolate2D(coords_in[0], coords_in[1], coords_in[2]);
   	normal = normalize(interpolate3D(normals_in[0], normals_in[1], normals_in[2]));
   	vertex = interpolate3D(vertices_in[0], vertices_in[1], vertices_in[2]);

    float Displacement = 0.0;
    vertex += normal * Displacement;
    gl_Position = gVP * vec4(WorldPos_FS_in, 1.0);
}