#version 400
in vec2 coords;
in vec4 worldPos;

out vec4 FragColor;

#define Iterations 20
#define MaxSteps 60
#define MinimumDistance 0.001
#define normalDistance     0.02
#define ColorIterations 120
#define PI 3.141592
#define Scale 1.565
#define FieldOfView 1.0
#define Jitter 0.5
#define FudgeFactor 1.0

#define Ambient 0.28452
#define Diffuse 0.57378
#define Specular 0.07272
#define LightDir vec3(1.0,1.0,-0.65048)
uniform vec3 LightColor;
#define LightDir2 vec3(1.0,-0.62886,1.0)
#define LightColor2 vec3(0.596078,0.635294,1.0)
uniform float nonce;
uniform vec3 nonce2;
#define iResolution vec2(1280, 720)

//uniform uint head[4000000];

vec3 offset;

vec2 rotate(vec2 v, float a) {
	return vec2(cos(a)*v.x + sin(a)*v.y, -sin(a)*v.x + cos(a)*v.y);
}

float trap(vec3 p){
	return  length(p.x-0.5-0.5*sin(nonce/100.0)); // <- cube forms
	//return  length(p.x-1.0);
	//return length(p.xz-vec2(1.0,1.0))-0.05; // <- tube forms
	//return length(p); // <- no trap
}

vec3 getLight(in vec3 color, in vec3 normal, in vec3 dir) {
	vec3 lightDir = normalize(LightDir);
	float specular = pow(max(0.0,dot(lightDir,-reflect(lightDir, normal))),20.0); // Phong
	float diffuse = max(0.0,dot(-normal, lightDir)); // Lambertian

	vec3 lightDir2 = normalize(LightDir2);
	float specular2 = pow(max(0.0,dot(lightDir2,-reflect(lightDir2, normal))),20.0); // Phong
	float diffuse2 = max(0.0,dot(-normal, lightDir2)); // Lambertian

	return
	    nonce2*Specular+
		(Specular*specular)*LightColor+(diffuse*Diffuse)*(LightColor*color) +
		(Specular*specular2)*LightColor2+(diffuse2*Diffuse)*(LightColor2*color);
}

float DE(in vec3 z)
{
	z  = abs(1.0-mod(z,2.0));

	float d = 1000.0;
	float r;
	for (int n = 0; n < Iterations; n++) {
		z.xz = rotate(z.xz, nonce/18.0);

		// This is octahedral symmetry,
		// with some 'abs' functions thrown in for good measure.
		if (z.x+z.y<0.0) z.xy = -z.yx;
		z = abs(z);
		if (z.x+z.z<0.0) z.xz = -z.zx;
		z = abs(z);
		if (z.x-z.y<0.0) z.xy = z.yx;
		z = abs(z);
		if (z.x-z.z<0.0) z.xz = z.zx;
		z = z*Scale - offset*(Scale-1.0);
		z.yz = rotate(z.yz, -nonce/2.0);

		d = min(d, trap(z) * pow(Scale, -float(n+1)));
	}
	return d;
}

vec3 getNormal(in vec3 pos) {
	vec3 e = vec3(0.0,normalDistance,0.0);

	return normalize(vec3(
			DE(pos+e.yxx)-DE(pos-e.yxx),
			DE(pos+e.xyx)-DE(pos-e.xyx),
			DE(pos+e.xxy)-DE(pos-e.xxy)));
}

vec3 getColor(vec3 normal, vec3 pos) {
	return mix(vec3(1.0),abs(normal),0.8525);
}

vec3 toneMap(in vec3 c) {
	c=pow(c,vec3(2.0));
	vec3 x = max(vec3(0.),c-vec3(0.004));
	c = (x*(6.2*x+.5))/(x*(6.2*x+1.7)+0.06);
	return c;
}

float rand(vec2 co){
	return fract(cos(dot(co,vec2(4.898,7.23))) * 23421.631);
}

vec4 rayMarch(in vec3 from, in vec3 dir, in vec2 pix) {
	// Add some noise to prevent banding
	float totalDistance = Jitter*rand(pix+vec2(nonce));

	float distance;
	int steps = 0;
	vec3 pos;
	for (int i=0; i < MaxSteps; i++) {
		pos = from + totalDistance * dir;
		distance = DE(pos)*FudgeFactor;
		totalDistance += distance;
		if (distance < MinimumDistance) break;
		steps = i;
	}

	// 'AO' is based on number of steps.
	// Try to smooth the count, to combat banding.
	float smoothStep = float(steps) + distance/MinimumDistance;
	float ao = 1.0-smoothStep/float(MaxSteps);

	// Since our distance field is not signed,
    // backstep when calc'ing normal
	vec3 normal = getNormal(pos-dir*normalDistance*3.0);

	vec3 color = getColor(normal, pos);
	vec3 light = getLight(color, normal, dir);
	return vec4(toneMap((color*Ambient+light)*ao),1.0);
}

vec3 uncharted2Tonemap(const vec3 x) {
	const float A = 0.15;
	const float B = 0.50;
	const float C = 0.10;
	const float D = 0.20;
	const float E = 0.02;
	const float F = 0.30;
	return ((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F;
}

void main()
{
  //   offset = vec3(1.0+0.2*(cos(nonce/5.7)),0.3+0.1*(cos(nonce/1.7)),1.).xzy;
	//
  //   float angle = nonce/5.0;
	//
  //       vec3 camPos = 0.5*nonce*vec3(1.0,0.0,0.0);
  //       vec3 target = camPos + vec3(1.0,0.5*cos(nonce),0.5*sin(0.4*nonce));
  //       vec3 camUp  = vec3(0.0,cos(angle),sin(angle));
	//
	//
  //       vec3 camDir   = normalize(target-camPos); // direction for center ray
  //       camUp = normalize(camUp-dot(camDir,camUp)*camDir); // orthogonalize
  //       vec3 camRight = normalize(cross(camDir,camUp));
	//
	//
  //       vec2 coord =-1.0+2.0*gl_FragCoord.xy/iResolution;
  //       coord.x *= iResolution.x/iResolution.y;
	//
	//
	// vec3 rayDir = normalize(camDir + (coord.x*camRight + coord.y*camUp)*FieldOfView);
	//
	// //this wasn't here before.
  //   vec3 col = rayMarch(camPos, rayDir, gl_FragCoord.xy ).xyz;
	//
  //   //for(int i = 0; i < 3; i ++)
  //    //   col = mix(col, rayMarch(camPos, rayDir * float(i)*0.1, gl_FragCoord.xy ).xyz, 0.2);
	//
  //   FragColor = vec4(col, 1);

	float shade = (abs(max(worldPos.z/10.0, 0.1)) + worldPos.w);

	FragColor = vec4(toneMap(vec3(1 * shade, 1 * shade, 1 * shade)), 1);

    //old code
    //rayMarch(camPos, rayDir, gl_FragCoord.xy);
}
