#version 150

// define the number of CPs in the output patch
layout (vertices = 3) out;

vec3 gEyeWorldPos;

in vec3 vertices_in[];
in vec3 normals_in[];
in vec2 coords_in[];

out vec3 vertices[];
out vec3 normals[];
out vec2 coords[];

float GetTessLevel(float Distance0, float Distance1)
{
    float AvgDistance = 5.0 - (max(1.0, min(5.0, (Distance0 + Distance1) / 2.0));

    return floor(AvgDistance * 4.2);
}

void main()
{
    vec3 gEyeWorldPos = vec3(0.0, 0.0, 0.0);

    coords[gl_InvocationID] = coords_in[gl_InvocationID];
    normals[gl_InvocationID] = normals_in[gl_InvocationID];
    vertices[gl_InvocationID] = vertices_in[gl_InvocationID];

    float EyeToVertexDistance0 = distance(gEyeWorldPos, vertices[0]);
    float EyeToVertexDistance1 = distance(gEyeWorldPos, vertices[1]);
    float EyeToVertexDistance2 = distance(gEyeWorldPos, vertices[2]);

    gl_TessLevelOuter[0] = GetTessLevel(EyeToVertexDistance1, EyeToVertexDistance2);
    gl_TessLevelOuter[1] = GetTessLevel(EyeToVertexDistance2, EyeToVertexDistance0);
    gl_TessLevelOuter[2] = GetTessLevel(EyeToVertexDistance0, EyeToVertexDistance1);
    gl_TessLevelInner[0] = gl_TessLevelOuter[2];
}